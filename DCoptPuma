% ------------------------------------------------------------------------
% ------------------------------------------------------------------------
% Trajectory Optimization for a Regenerative PUMA 500 Robot
%
% This code solves the optimal control problem for a PUMA 500 robot having
% ultracapacitor based regenerative drive systems. Optimal trajectories
% are found that maximize energy regenration. The direct collacation
% method is used to transform the problem into a large-scale nonlinear
% program (NLP) problem. The problem is then solved using the 
% IPOPT (interior point optimizer) numerical solver. Results are presented
% in the paper entitled "Trajectory Optimization of Robots with
% Regenerative Drive Systems: Numerical and Experimental Results"
%
% Code is written by : Poya Khalaf and Farbod Rohani
%
% This code requires the IPOPT numerical solver which can be downloaded
% from www.coin-or.org/download/binary/Ipopt/
%
% ------------------------------------------------------------------------
% ------------------------------------------------------------------------

function DCoptPuma

    close all

    Problem.N = 100; % number of collocation points

    Problem.t_ini=0; % initial time

    Problem.t_f=2; % final time

    Problem.h = Problem.t_f/(Problem.N-1);  % time step for direct collocation

    Problem.t = Problem.t_ini:Problem.h:Problem.t_f;  % time points for direct collocation

    Problem.discretization='ME'; % Choose between Backward Euler (BE) or Midpoint Euler (ME) is for discretization 

%%system parameters
    Puma_model.R1=2.5153;  % Resistance of motor of joint 1 
    Puma_model.R2=2.7076;  % Resistance of motor of joint 2
    Puma_model.R3=2.1947;  % Resistance of motor of joint 3 
    Puma_model.a1=13.9569; % a=alpha*n where alpha is the torque constant and n is the gear ratio
    Puma_model.a2=22.5725; 
    Puma_model.a3=12.3554; 


%Theta parameters for the PUma 500 robot
    Puma_model.TH0=3.4677;
    Puma_model.TH1=0.9129;
    Puma_model.TH2=0.2377;
    Puma_model.TH3=0.4387;
    Puma_model.TH4=-0.1525;
    Puma_model.TH5=4.2051;
    Puma_model.TH6=0.9622;
    Puma_model.TH7=-0.8711;
    Puma_model.TH8=9.9665;
    Puma_model.TH9=42.1485;
    Puma_model.TH10=2.1259;
    Puma_model.TH11=13.2584;
    Puma_model.TH12=0.8567;
    Puma_model.lambda11=3.2464;
    Puma_model.lambda12=32.6434;
    Puma_model.lambda13=0;
    Puma_model.lambda14=4.0627;
    Puma_model.lambda15=734.8534;
    Puma_model.lambda21=8.9118e-04;
    Puma_model.lambda22=152.6206;
    Puma_model.lambda23=0;
    Puma_model.lambda24=5.9186;
    Puma_model.lambda25=92.3286;
    Puma_model.lambda31=1.4618;
    Puma_model.lambda32=189.2568;
    Puma_model.lambda33=0;
    Puma_model.lambda34=2.7987;
    Puma_model.lambda35=11.9387;


% collocation grid and unknowns
    Puma_model.Nstates=6;               %number of states
    Puma_model.Nvarpernode = 9;			% number of unknowns per node: 6 states and 3 controls q1,q2,q3,q1dot,q2dot,q3dot,u1,u2,u3
	Puma_model.Nconpernode = 6;         % number of constraint equations per node(number of state equations)
    Puma_model.Nvar = Problem.N * Puma_model.Nvarpernode;   % number of unknowns 
	Puma_model.Ncon = (Problem.N-1)* Puma_model.Nconpernode + Puma_model.Nstates*2 ;		% number of state equation constraints + initial and final cconditions
    
    
% variable inexes
    Problem.iq1= 1:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;     % index of q1 within X
    Problem.iq2= 2:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;     % index of q2 within X
    Problem.iq3= 3:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;     % index of q3 within X
    Problem.iq1dot= 4:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;  % index of q1dot within X
    Problem.iq2dot= 5:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;  % index of q2dot within X
    Problem.iq3dot= 6:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;  % index of q3dot within X
    Problem.iu1 = 7:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;    % index of u1 within X
    Problem.iu2 = 8:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;    % index of u2 within X
    Problem.iu3 = 9:Puma_model.Nvarpernode:(Problem.N)*Puma_model.Nvarpernode;    % index of u3 within X
    
% Initial and final conditions in joint space x=[q1;q2;q3;q1dot;q2dot;q3dot]
motion=1;

if motion==1
       
    Problem.x_ini=[0;-2*pi/5;0;0;0;0]; % point A
    Problem.x_f=[pi/3;0;pi/4;0;0;0]; % point B
    
elseif motion==2
    
    Problem.x_ini=[0;pi/4;-pi/4;0;0;0]; % point A
    Problem.x_f=[-pi/4;-3*pi/4;0;0;0;0]; % point B
    
else
    
    Problem.x_ini=[0;-pi/4;pi/4;0;0;0]; % point A
    Problem.x_f=[pi/2;-pi/4;pi/4;0;0;0]; % point B
    
end

% Determine Jacobian structure and number of non-zeros
    Xr = rand(Puma_model.Nvar,1);
    Puma_model.J_nnz = 1;
    J = jac_confun(Xr);
    Puma_model.structure_jac_confun = double(J ~= 0);
    Puma_model.J_nnz = nnz(J);
    
% Check the derivatives 
%Set N=10 and uncomment to check if derivative equations are correct
  % checkderiv 

     
% Bounds on the variables (q1,q2,q3,q1dot,q2dot,q3dot,u1,u2,u3)   
    Vcap=27; % capacitor voltage assumed to be constant
    xlb = [-inf ; -inf ; -inf ; -inf ; -inf ; -inf ; -Puma_model.a1/Puma_model.R1*Vcap; -Puma_model.a2/Puma_model.R2*Vcap;-Puma_model.a3/Puma_model.R3*Vcap];
    xub = [ inf ;  inf ; inf;  inf ;  inf ;  inf ; Puma_model.a1/Puma_model.R1*Vcap; Puma_model.a2/Puma_model.R2*Vcap;Puma_model.a3/Puma_model.R3*Vcap];
    
    
%initial guess        
     X0 = rand(Puma_model.Nvar,1)*6-3;
     X0(Problem.iu1)=600*X0(Problem.iu1)-300;
     X0(Problem.iu2)=600*X0(Problem.iu2)-300;
     X0(Problem.iu3)=600*X0(Problem.iu3)-300;
   
    
    
% solve the NLP with IPOPT
    funcs.objective = @objfun;
    funcs.gradient  = @grad_objfun;
    funcs.constraints = @confun;
    funcs.jacobian    = @jac_confun;
    funcs.jacobianstructure = @structure_jac_confun;

    options.lb = repmat(xlb, Problem.N, 1);
    options.ub = repmat(xub, Problem.N, 1);
    options.cl = zeros(Puma_model.Ncon,1);
    options.cu = zeros(Puma_model.Ncon,1);	
    options.ipopt.max_iter = 50000;
    options.ipopt.hessian_approximation = 'limited-memory';
    options.ipopt.tol = 1e-6;
% 	options.ipopt.print_level = 0;       
% solve problem form A to B
    [Xres1, info] = ipopt(X0,funcs,options);
    
%     if info.status ~= 0 
% 		error('IPOPT did not solve')  
%     end
    

% solve probelm from B to A
    temp=Problem.x_ini;
    Problem.x_ini=Problem.x_f;
    Problem.x_f=temp;

    [Xres2, info] = ipopt(X0,funcs,options);
    
%     if info.status ~= 0
% 		error('IPOPT did not solve')  
%     end
    
    

% results
time=[Problem.t';Problem.t(end)+Problem.h+Problem.t'];  
q1=[Xres1(Problem.iq1);Xres2(Problem.iq1)];
q2=[Xres1(Problem.iq2);Xres2(Problem.iq2)];
q3=[Xres1(Problem.iq3);Xres2(Problem.iq3)];

q1dot=[Xres1(Problem.iq1dot);Xres2(Problem.iq1dot)];
q1ddot=[0;diff(q1dot)/Problem.h];

q2dot = [Xres1(Problem.iq2dot);Xres2(Problem.iq2dot)];
q2ddot =[0;diff(q2dot)/Problem.h];

q3dot = [Xres1(Problem.iq3dot);Xres2(Problem.iq3dot)];
q3ddot =[0;diff(q3dot)/Problem.h];

u1=[Xres1(Problem.iu1);Xres2(Problem.iu1)];
u2=[Xres1(Problem.iu2);Xres2(Problem.iu2)];
u3=[Xres1(Problem.iu3);Xres2(Problem.iu3)];
       
p1=-q1dot.*u1+Puma_model.R1/(Puma_model.a1^2)*u1.^2; % joint 1 power flow
p2=-q2dot.*u2+Puma_model.R2/(Puma_model.a2^2)*u2.^2; % joint 2 power flow
p3=-q3dot.*u3+Puma_model.R3/(Puma_model.a3^2)*u3.^2; % joint 3 power flow
p=p1+p2+p3; % total power flow

figure
plot(time,p1,'-.',time,p2,'--',time,p3,':',time,p,'LineWidth',2)
legend('Joint 1','Joint 2','Joint 3','Total')
xlabel('Time (s)')
ylabel('Power (w)')
xlim([0,time(end)])

figure
plot(time,q1,time,q2,'--',time,q3,':','LineWidth',2)
xlabel('Time (s)')
ylabel('q (rad)')
legend('q_1','q_2','q_3')
xlim([0,time(end)])

figure
plot(time,u1,time,u2,'--',time,u3,':','LineWidth',2)
xlabel('Time (s)')
ylabel('u (V)')
legend('u_1','u_2','u_3')
xlim([0,time(end)])



E_AtoB(1,1)=trapz(-Xres1(Problem.iq1dot).*Xres1(Problem.iu1)+Puma_model.R1/(Puma_model.a1^2)*Xres1(Problem.iu1).^2)*Problem.h;
E_AtoB(2,1)=trapz(-Xres1(Problem.iq2dot).*Xres1(Problem.iu2)+Puma_model.R2/(Puma_model.a2^2)*Xres1(Problem.iu2).^2)*Problem.h;
E_AtoB(3,1)=trapz(-Xres1(Problem.iq3dot).*Xres1(Problem.iu3)+Puma_model.R3/(Puma_model.a3^2)*Xres1(Problem.iu3).^2)*Problem.h;
E_AtoB(4,1)=sum(E_AtoB(1:3));

E_BtoA(1,1)=trapz(-Xres2(Problem.iq1dot).*Xres2(Problem.iu1)+Puma_model.R1/(Puma_model.a1^2)*Xres2(Problem.iu1).^2)*Problem.h;
E_BtoA(2,1)=trapz(-Xres2(Problem.iq2dot).*Xres2(Problem.iu2)+Puma_model.R2/(Puma_model.a2^2)*Xres2(Problem.iu2).^2)*Problem.h;
E_BtoA(3,1)=trapz(-Xres2(Problem.iq3dot).*Xres2(Problem.iu3)+Puma_model.R3/(Puma_model.a3^2)*Xres2(Problem.iu3).^2)*Problem.h;
E_BtoA(4,1)=sum(E_BtoA(1:3));

Joints={'Joint1';'Joint2';'Joint3';'Total'};
table(Joints,E_AtoB,E_BtoA)

%Save Data
PlotData.u1=u1;
PlotData.u2=u2;
PlotData.u3=u3;

save(['OptimalTrajectories',num2str(motion),num2str(Problem.t_f)],'q1','q2','q3','q1dot','q2dot','q3dot','q1ddot','q2ddot',...
    'q3ddot','time','Puma_model','PlotData')

% objective function
function [f] = objfun(X)
    
% energy stored in common capacitor
    f=Problem.h*sum(-X(Problem.iq1dot).*X(Problem.iu1)+Puma_model.R1/(Puma_model.a1^2)*X(Problem.iu1).^2+...
        -X(Problem.iq2dot).*X(Problem.iu2)+Puma_model.R2/(Puma_model.a2^2)*X(Problem.iu2).^2+...
    -X(Problem.iq3dot).*X(Problem.iu3)+Puma_model.R3/(Puma_model.a3^2)*X(Problem.iu3).^2);

    % a short pause to make sure that IPOPT screen output appears
    % continuously (if print_level was set accordingly)
    pause(1e-6);	
end


% gradient of objective function
function g = grad_objfun(X)
   
    % initialize gradient
    g = zeros(size(X));
	
    g(Problem.iq1dot)=-Problem.h*X(Problem.iu1);
    g(Problem.iq2dot)=-Problem.h*X(Problem.iu2);
    g(Problem.iq3dot)=-Problem.h*X(Problem.iu3);
    g(Problem.iu1)=Problem.h*(-X(Problem.iq1dot)+2*Puma_model.R1/(Puma_model.a1^2)*X(Problem.iu1));
    g(Problem.iu2)=Problem.h*(-X(Problem.iq2dot)+2*Puma_model.R2/(Puma_model.a2^2)*X(Problem.iu2));
    g(Problem.iu3)=Problem.h*(-X(Problem.iq3dot)+2*Puma_model.R3/(Puma_model.a3^2)*X(Problem.iu3));

end

% dynamic equations in the form  f(x, dx/dt) = 0 where x contains the state variables and the controls
function f = dynfun(z,zdot)

    q1=z(1);
    q2=z(2);
    q3=z(3);
    q1dot=z(4);
    q2dot=z(5);
    q3dot=z(6);

    taud=z(7:9);


    D(1,1)=Puma_model.TH2*cos(q2 + q3)^2 + 2*Puma_model.TH3*cos(q2 + q3)*cos(q2) + Puma_model.TH1*cos(q2)^2 + Puma_model.TH0;
    D(1,2)=Puma_model.TH4*sin(q2 + q3) + Puma_model.TH7*sin(q2);
    D(1,3)=Puma_model.TH4*sin(q2 + q3);
    D(2,1)=D(1,2);
    D(2,2)=Puma_model.TH5 + 2*Puma_model.TH3*cos(q3);
    D(2,3)=Puma_model.TH6 + Puma_model.TH3*cos(q3);
    D(3,1)=D(1,3);
    D(3,2)=D(2,3);
    D(3,3)=Puma_model.TH6;

    C(1,1)=-q2dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*cos(q2 + q3)*sin(q2) + Puma_model.TH3*sin(q2 + q3)*cos(q2) + Puma_model.TH1*cos(q2)*sin(q2)) - q3dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*sin(q2 + q3)*cos(q2));
    C(1,2)=q2dot*(Puma_model.TH4*cos(q2 + q3) + Puma_model.TH7*cos(q2)) - q1dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*cos(q2 + q3)*sin(q2) + Puma_model.TH3*sin(q2 + q3)*cos(q2) + Puma_model.TH1*cos(q2)*sin(q2)) + Puma_model.TH4*q3dot*cos(q2 + q3);
    C(1,3)=Puma_model.TH4*q2dot*cos(q2 + q3) - q1dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*sin(q2 + q3)*cos(q2)) + Puma_model.TH4*q3dot*cos(q2 + q3);
    C(2,1)=q1dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*cos(q2 + q3)*sin(q2) + Puma_model.TH3*sin(q2 + q3)*cos(q2) + Puma_model.TH1*cos(q2)*sin(q2));
    C(2,2)=-Puma_model.TH3*q3dot*sin(q3);
    C(2,3)=-Puma_model.TH3*q2dot*sin(q3) -Puma_model.TH3*q3dot*sin(q3);
    C(3,1)=q1dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*sin(q2 + q3)*cos(q2));
    C(3,2)=Puma_model.TH3*q2dot*sin(q3);
    C(3,3)=0;

    gg=[0;-Puma_model.TH8*cos(q2 + q3)-Puma_model.TH9*cos(q2);-Puma_model.TH8*cos(q2 + q3)];

    Bemf=diag([Puma_model.a1^2/Puma_model.R1;Puma_model.a2^2/Puma_model.R2;Puma_model.a3^2/Puma_model.R3]);

    friction=diag([Puma_model.TH10,Puma_model.TH11,Puma_model.TH12]);
    
    friction2=[Puma_model.lambda11*(tanh(Puma_model.lambda12*q1dot)-tanh(Puma_model.lambda13*q1dot))+Puma_model.lambda14*tanh(Puma_model.lambda15*q1dot);...
        Puma_model.lambda21*(tanh(Puma_model.lambda22*q2dot)-tanh(Puma_model.lambda23*q2dot))+Puma_model.lambda24*tanh(Puma_model.lambda25*q2dot);...
        Puma_model.lambda31*(tanh(Puma_model.lambda32*q3dot)-tanh(Puma_model.lambda33*q3dot))+Puma_model.lambda34*tanh(Puma_model.lambda35*q3dot)];

    f=[zdot(1:3)-z(4:6);D*zdot(4:6)-(taud-C*z(4:6)-Bemf*z(4:6)-gg-friction*z(4:6)-friction2)];
   
end

% jacobian of the dynamic equations
function [dfdx, dfdxdot]=jac_dynfun(z,zdot)
    
    q1=z(1);
    q2=z(2);
    q3=z(3);
    q1dot=z(4);
    q2dot=z(5);
    q3dot=z(6);

    q1ddot=zdot(4);
    q2ddot=zdot(5);
    q3ddot=zdot(6);

    % initialize the Jacobian matrices df/dx, df/dxdot
    dfdx = spalloc(Puma_model.Nconpernode ,Puma_model.Nvarpernode,21);
    dfdxdot = spalloc(Puma_model.Nconpernode ,Puma_model.Nvarpernode,12);

    % equation 1:3 zdot(1:3)-z(4:6)= 0:
    dfdx(1:3,4:6) = -eye(3);
    dfdxdot(1:3,1:3) = eye(3);


    % equation 4 
    dfdx(4,2) = Puma_model.TH4*q2ddot*cos(q2 + q3) - Puma_model.TH4*q2dot^2*sin(q2 + q3) - Puma_model.TH4*q3dot^2*sin(q2 + q3) ...
    - Puma_model.TH1*q1ddot*sin(2*q2) - Puma_model.TH7*q2dot^2*sin(q2) - Puma_model.TH2*q1ddot*sin(2*q2 + 2*q3) - 2*Puma_model.TH3*q1ddot*sin(2*q2 + q3)...
    + Puma_model.TH4*q3ddot*cos(q2 + q3) + Puma_model.TH7*q2ddot*cos(q2) - 2*Puma_model.TH4*q2dot*q3dot*sin(q2 + q3) - 4*Puma_model.TH3*q1dot*q2dot*cos(2*q2 + q3)...
    - 2*Puma_model.TH3*q1dot*q3dot*cos(2*q2 + q3) - 2*Puma_model.TH1*q1dot*q2dot*cos(2*q2) - 2*Puma_model.TH2*q1dot*q2dot*cos(2*q2 + 2*q3) ...
    - 2*Puma_model.TH2*q1dot*q3dot*cos(2*q2 + 2*q3);

    dfdx(4,3)= Puma_model.TH4*q2ddot*cos(q2 + q3) - Puma_model.TH3*q1ddot*sin(2*q2 + q3) - Puma_model.TH4*q2dot^2*sin(q2 + q3) - Puma_model.TH4*q3dot^2*sin(q2 + q3)...
    - Puma_model.TH2*q1ddot*sin(2*q2 + 2*q3) - Puma_model.TH3*q1ddot*sin(q3) + Puma_model.TH4*q3ddot*cos(q2 + q3) - 2*Puma_model.TH4*q2dot*q3dot*sin(q2 + q3) ...
    - Puma_model.TH3*q1dot*q3dot*cos(q3) - 2*Puma_model.TH3*q1dot*q2dot*cos(2*q2 + q3) - Puma_model.TH3*q1dot*q3dot*cos(2*q2 + q3) - 2*Puma_model.TH2*q1dot*q2dot*cos(2*q2 + 2*q3)...
    - 2*Puma_model.TH2*q1dot*q3dot*cos(2*q2 + 2*q3); 

    dfdx(4,4)=Puma_model.a1^2/Puma_model.R1+ Puma_model.TH10 - Puma_model.TH3*q3dot*sin(q3) - 2*Puma_model.TH3*q2dot*sin(2*q2 + q3) - Puma_model.TH3*q3dot*sin(2*q2 + q3)...
        - Puma_model.TH1*q2dot*sin(2*q2) - Puma_model.TH2*q2dot*sin(2*q2 + 2*q3) - Puma_model.TH2*q3dot*sin(2*q2 + 2*q3)...
        - Puma_model.lambda11*(Puma_model.lambda12*(tanh(Puma_model.lambda12*q1dot)^2 - 1) - Puma_model.lambda13*(tanh(Puma_model.lambda13*q1dot)^2 - 1)) - Puma_model.lambda14*Puma_model.lambda15*(tanh(Puma_model.lambda15*q1dot)^2 - 1);

    dfdx(4,5)=2*Puma_model.TH4*q2dot*cos(q2 + q3) - Puma_model.TH1*q1dot*sin(2*q2) - Puma_model.TH2*q1dot*sin(2*q2 + 2*q3) - 2*Puma_model.TH3*q1dot*sin(2*q2 + q3)...
        + 2*Puma_model.TH4*q3dot*cos(q2 + q3) + 2*Puma_model.TH7*q2dot*cos(q2);

    dfdx(4,6)=2*Puma_model.TH4*q2dot*cos(q2 + q3) - 2*q1dot*(Puma_model.TH2*cos(q2 + q3)*sin(q2 + q3) + Puma_model.TH3*sin(q2 + q3)*cos(q2))...
        + 2*Puma_model.TH4*q3dot*cos(q2 + q3);

    dfdx(4,7)=-1;


    dfdxdot(4,4) = Puma_model.TH0 + Puma_model.TH2*cos(q2 + q3)^2 + Puma_model.TH1*cos(q2)^2 + 2*Puma_model.TH3*cos(q2 + q3)*cos(q2);

    dfdxdot(4,5) =Puma_model.TH4*sin(q2 + q3) + Puma_model.TH7*sin(q2);

    dfdxdot(4,6) =Puma_model.TH4*sin(q2 + q3);


    % equation 5

    dfdx(5,2)= Puma_model.TH8*sin(q2 + q3) + Puma_model.TH9*sin(q2) + 2*Puma_model.TH3*q1dot^2*cos(2*q2 + q3) + Puma_model.TH1*q1dot^2*cos(2*q2) ...
        + Puma_model.TH4*q1ddot*cos(q2 + q3) + Puma_model.TH2*q1dot^2*cos(2*q2 + 2*q3) + Puma_model.TH7*q1ddot*cos(q2);

    dfdx(5,3)= Puma_model.TH8*sin(q2 + q3) - 2*Puma_model.TH3*q2ddot*sin(q3) - Puma_model.TH3*q3ddot*sin(q3) - Puma_model.TH3*q3dot^2*cos(q3)...
        + Puma_model.TH3*q1dot^2*cos(2*q2 + q3) + Puma_model.TH4*q1ddot*cos(q2 + q3) + Puma_model.TH2*q1dot^2*cos(2*q2 + 2*q3) -...
        2*Puma_model.TH3*q2dot*q3dot*cos(q3);

    dfdx(5,4)=q1dot*(Puma_model.TH2*sin(2*q2 + 2*q3) + 2*Puma_model.TH3*sin(2*q2 + q3) + Puma_model.TH1*sin(2*q2));

    dfdx(5,5)=Puma_model.a2^2/Puma_model.R2 + Puma_model.TH11 - 2*Puma_model.TH3*q3dot*sin(q3)...
        - Puma_model.lambda21*(Puma_model.lambda22*(tanh(Puma_model.lambda22*q2dot)^2 - 1) - Puma_model.lambda23*(tanh(Puma_model.lambda23*q2dot)^2 - 1)) - Puma_model.lambda24*Puma_model.lambda25*(tanh(Puma_model.lambda25*q2dot)^2 - 1);

    dfdx(5,6)=-2*Puma_model.TH3*sin(q3)*(q2dot + q3dot);

    dfdx(5,8)=-1;

    dfdxdot(5,4) =Puma_model.TH4*sin(q2 + q3) + Puma_model.TH7*sin(q2);

    dfdxdot(5,5)=Puma_model.TH5 + 2*Puma_model.TH3*cos(q3);

    dfdxdot(5,6)=Puma_model.TH6 + Puma_model.TH3*cos(q3);

    % equation 6

    dfdx(6,2)=Puma_model.TH8*sin(q2 + q3) + Puma_model.TH3*q1dot^2*cos(2*q2 + q3) + Puma_model.TH4*q1ddot*cos(q2 + q3) + Puma_model.TH2*q1dot^2*cos(2*q2 + 2*q3);

    dfdx(6,3)=Puma_model.TH8*sin(q2 + q3) - Puma_model.TH3*q2ddot*sin(q3) + Puma_model.TH3*q2dot^2*cos(q3) + Puma_model.TH2*q1dot^2*cos(q2 + q3)^2- ...
     Puma_model.TH2*q1dot^2*sin(q2 + q3)^2 + Puma_model.TH4*q1ddot*cos(q2 + q3) + Puma_model.TH3*q1dot^2*cos(q2 + q3)*cos(q2);

    dfdx(6,4)=2*q1dot*sin(q2 + q3)*(Puma_model.TH2*cos(q2 + q3) + Puma_model.TH3*cos(q2));

    dfdx(6,5)=2*Puma_model.TH3*q2dot*sin(q3);

    dfdx(6,6)=Puma_model.a3^2/Puma_model.R3 + Puma_model.TH12...
        - Puma_model.lambda31*(Puma_model.lambda32*(tanh(Puma_model.lambda32*q3dot)^2 - 1) - Puma_model.lambda33*(tanh(Puma_model.lambda33*q3dot)^2 - 1)) - Puma_model.lambda34*Puma_model.lambda35*(tanh(Puma_model.lambda35*q3dot)^2 - 1);

    dfdx(6,9)=-1;

    dfdxdot(6,4) =Puma_model.TH4*sin(q2 + q3);

    dfdxdot(6,5) =Puma_model.TH6 + Puma_model.TH3*cos(q3);

    dfdxdot(6,6) =Puma_model.TH6;

    
end

%function containing the constraints of the problem
function c = confun(X)
           
	c = zeros(Puma_model.Ncon,1);     % initialize the constraints
        
    ix1 = 1:Puma_model.Nvarpernode;   % index for the variables of node 1
    ic  = 1:Puma_model.Nconpernode;   % index for constraints from node 1
    
    for i = 1:Problem.N-1
        % extract variables from successive nodes
        x1 = X(ix1);
        x2 = X(ix1 + Puma_model.Nvarpernode);  
        
      
    	% dynamics constraints are calculated by dynfun function
        
        % use Backward Euler formula or Midpoint Euler formula as dynamics constraint
        if strcmp(Problem.discretization, 'BE')
            c(ic) = dynfun(x2 , (x2-x1)/Problem.h);
        else
            c(ic) = dynfun((x1+x2)/2 , (x2-x1)/Problem.h);
        end
        
        ix1 = ix1 + Puma_model.Nvarpernode;
        ic  = ic  + Puma_model.Nconpernode;
    end

    % initial and final conditions constraints
    c(Puma_model.Nconpernode*(Problem.N-1)+(1:2*Puma_model.Nstates)) = ...
        [X((1:Puma_model.Nstates))-Problem.x_ini;X((Problem.N-1)*Puma_model.Nvarpernode + (1:Puma_model.Nstates))-Problem.x_f];


end

function J = jac_confun(X)

% initialize the sparse Jacobian matrix
J= spalloc(Puma_model.Ncon,Puma_model.Nvar, Puma_model.J_nnz);		
    
 	ix1 = 1:Puma_model.Nvarpernode;   % index for the variables of node 1
    ic  = 1:Puma_model.Nconpernode;   % index for constraints from node 1
    
    for i=1:Problem.N-1
        
		% extract variables from two successive nodes
		x1 = X(ix1);
		x2 = X(ix1 + Puma_model.Nvarpernode);
        
        if strcmp(Problem.discretization, 'BE')
            [dfdx, dfdxdot] = jac_dynfun(x2, (x2-x1)/Problem.h);
            J(ic,ix1) = -dfdxdot/Problem.h;
            J(ic,ix1 + Puma_model.Nvarpernode) = dfdx + dfdxdot/Problem.h;
        else
            [dfdx, dfdxdot] = jac_dynfun((x1+x2)/2, (x2-x1)/Problem.h);
            J(ic,ix1) = dfdx/2 - dfdxdot/Problem.h;
            J(ic,ix1 + Puma_model.Nvarpernode) = dfdx/2 + dfdxdot/Problem.h;
        end
        
		%  advance ix1 and ic to next node
		ix1 = ix1 + Puma_model.Nvarpernode;
		ic  = ic  + Puma_model.Nconpernode;
        
    end
    % Jacobian elements from the intitla and final conditions constraints
    J(Puma_model.Nconpernode*(Problem.N-1)+(1:Puma_model.Nstates),(1:Puma_model.Nstates))=eye(Puma_model.Nstates);
    J(Puma_model.Nconpernode*(Problem.N-1)+(Puma_model.Nstates+1:2*Puma_model.Nstates),Puma_model.Nvarpernode*(Problem.N-1)+(1:Puma_model.Nstates))=eye(Puma_model.Nstates);
    

end


function J = structure_jac_confun(~)
    
    J = Puma_model.structure_jac_confun;

end

 function checkderiv
	% using finite differences to check that the code in grad_objfun and jac_confun is correct
    N_Check=10;
    NX=N_Check * Puma_model.Nvarpernode;
	hh= 1e-6;
    X_Check = randn(NX,1);
	f        = objfun(X_Check);
	grad     = grad_objfun(X_Check);
	c        = confun(X_Check);
    Ncon     = size(c,1);
	cjac     = jac_confun(X_Check);
	cjac_num = zeros(Ncon,NX);
	grad_num = zeros(NX,1);
	
    for i=1:NX
        fprintf('checking derivatives for unknown %4d of %4d\n',i,NX);
        Xisave        = X_Check(i);
        X_Check(i)    = X_Check(i) + hh;
        cjac_num(:,i) = (confun(X_Check) - c)/hh;
        grad_num(i)   = (objfun(X_Check) - f)/hh;
        X_Check(i)          = Xisave;
    end
	
	% report maximal differences between analytical derivatives and numerical results
	fprintf('Max. error in constraint jacobian: ');
	matcompare(cjac, cjac_num);
	fprintf('Max. error in objective gradient: ');
	matcompare(grad, grad_num);
	disp('Type dbcont to continue');

    keyboard	
    end
 %====================================================================
    function matcompare(a,b)
	% compares two matrices and prints element that has greatest difference
	[maxerr,irow] = max(abs(a-b));
	[maxerr,icol] = max(maxerr);
	irow = irow(icol);
	fprintf('%9.6f at %d %d (%9.6f vs. %9.6f)\n', full(maxerr), irow, icol, full(a(irow,icol)), full(b(irow,icol)));
    end

    
end




